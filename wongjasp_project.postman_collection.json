{
	"info": {
		"_postman_id": "8ae700cf-747c-491e-8ecf-a32760a95652",
		"name": "hw9-wongjasp-project",
		"description": "\nInstructions\nFor this assignment you need only deal with boats\n\n{ \n\"id\":\"abc123\",       # Automatically generated by Datastore\n\"name\": \"Sea Witch\", # The name of the boat, a string\n\"type\": \"Catamaran\", # The type of the boat, power boat, sailboat, catamaran etc. a string\n\"length\": 28, # The length of the boat\n\"public\": true # Boolean. true means the boat is public, false means it's private.\n\"owner\": \"auth0|5eb70257\", # The owner of the boat, value of sub property in the JWT\n\"self\":\"https://appspot.com/boats/abc123\" # Optional\n}\nThe new properties here are\n\n\"owner\"\nEach boat has an owner which corresponds to the value of the \"sub\" property in the JWT when the boat is created.\n\"public\" \nA Boolean value\nIf the value is true, then the boat is public\nIf false, then the boat is private\nThe \"self\" property is no longer required. If it is easier for you, leave it in. Its presence or absence, or its value will have no impact on your grade.\n\nThere is no need to implement pagination for any of the end-points in this assignment.\n\nREST API\nHere are the endpoints you need to implement (note you don't need to implement editing the boat or viewing an individual boat)\n\nPOST /boats\nCreate the boat and return 201 status if the request has a valid JWT and set the owner of the boat to the value of the \"sub\" property in the JWT.\nReturn 401 status code for missing or invalid JWTs.\nThe request body will be a JSON object with the properties\nname\ntype\nlength\npublic\nYou can assume that the request body is valid and you don't need to validate it.\nYou don't need to enforce uniqueness of the name.\nGET /owners/:owner_id/boats\nReturn 200 status code and all public boats for the specified owner_id regardless of whether the request has a valid or invalid JWT or whether a JWT is missing.\nIf this owner doesn't have any public boats, the status code should still be 200 even though there will be no boats in the response body. It is up to you what the response body contains in this case (an empty array might be simple, but your choice).\nYou do not need to implement any of the parent routes\nE.g. You do not need to implement GET /owners or GET /owners/:owner_id\nEach boat in the response should be a JSON with at least the 6 required properties shown above.\nGET /boats\nIf the supplied JWT is valid, return 200 status code and all boats whose owner matches the \"sub\" property in the supplied JWT\nIf no JWT is provided or an invalid JWT is provided, return all public boats and 200 status code\nEach boat is the response should be a JSON with at least the 6 required properties shown above.\nDELETE /boats/:boat_id\nDelete the boat and return 204 status code in case of success\nOnly the owner of a boat with a valid JWT should be able to delete that boat\nReturn 401 status code for missing or invalid JWTs.\nReturn 403 status code\nIf the JWT is valid but boat_id is owned by someone else, or\nIf the JWT is valid but no boat with this boat_id exists.\nJWT\nIn addition to the REST API, you also need to implement a web application that allows users to generate JWTs\nYou can use Auth0 or Google OAuth API as your JWT provider. To use some other JWT provider, you need to get approval from the instructor.\nIf you use Auth0 as your JWT provider\nYou need to provide a \"Welcome\" page on which the user can provide an email address and a password, and you need to register them at Auth0 under your Auth0 domain\nAfter the account is created, the \"User Info\" page must display a JWT issued by Auth0 for this user\nIf the user has already created an account, when they enter the email address and the password on the \"Welcome\" page, you should display the \"User Info\" page with a new JWT issued by Auth0 for this user\nIf you are unable to create accounts for new users in your app, you can pre-create 2 users in your Auth0 domain and provide their email and password in your PDF document for the loss of 0.5 points.\nIn this case, the grader must still be able to use your app to generate JWTs using the email and password info you have provided for these 2 users.\nIn this case, you can either support generation of JTWs via a web app or by providing a Postman Collection that contains a test that calls a REST endpoint in your Auth0 domain to generate JWTs.\nIf you use Google OAuth API as your JWT provider\nYou need to have a \"Welcome\" page which a link that takes user to Google's login page, and after they login to Google, then you need to display a \"User Info\" page with a new JWT issued by Google.\nYou don't need to display the state variable\nFYI: the response you got from Google OAuth API that you used in Assignment 6 to get the token also includes the JWT in the attribute \"id_token\"\nDon't restrict the gmail.com address to oregonstate.edu, i.e., allow external users to use your app to generate JWTs.\nHints\nWe will send the requests to your REST API using Postman\nThe grader will use the web pages of your app to generate JWTs for at least 2 different users and then use the JWTs in Postman. In other words, there is no integration required between the web pages of your app and the REST API.\nFor Postman requests that need a valid JWT\nOn the Authorization tab\nWith Type \"Bearer Token\"\nIn \"Token\" field, we will put the value of the JWT\nThe value of \"sub\" can be obtained by decoding a JWT and this value will be used for the \"owner_id\" when testing the API.\nWe will visually inspect the response body for the following 2 requests\nGET /boats\nGET /owners/:owner_id/boats\nFor all other responses, we will only verify the status code. The contents of the response body, if any, are entirely your choice.\nYou are allowed to use Google's OAuth client libraries for this assignment.\nYou are allowed to use any code discussed/provided in Module 7 for the assignment.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "verify-jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "562f3583-e310-4969-b126-5bea6015af8d",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "jwt",
						"value": "Bearer  eyJhbGciOiJSUzI1NiIsImtpZCI6ImQ5NDZiMTM3NzM3Yjk3MzczOGU1Mjg2YzIwOGI2NmU3YTM5ZWU3YzEiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiYXpwIjoiNzM4NDE0NDI4ODg2LXE5MGJtamt0c2d1ajAyaGZsNnVsYTdwYzdzdml0bXN0LmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwiYXVkIjoiNzM4NDE0NDI4ODg2LXE5MGJtamt0c2d1ajAyaGZsNnVsYTdwYzdzdml0bXN0LmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwic3ViIjoiMTAyODUyMjU2NDA4OTcxMzA4MDc1IiwiZW1haWwiOiJqd29uZ3Rvb0BnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXRfaGFzaCI6Imtkak9PX0FCTkx4c3U3My1CYjMyOXciLCJpYXQiOjE2MDU2NDcyMjYsImV4cCI6MTYwNTY1MDgyNn0.EbJbmXAGKOpRejBmJ_BGqxx2WhE0QJj4j-iKCPGI_OAtaZRFk7dbhqF1-Bc3aqdXe_18FK_1ymwFMLTFxrytIOLFtIPumayo9yf51i4EW4QwmEq1uWM_z9p7-tF2uo-ZIySYjg5RkvOX884bpDzExax-L_RbcVSaTV2dTRpOQ-GUhgEoWxJ1FecbxmTEwHDc4nBCKxthRCjXCwLYwcDBeerktt3NohZWUaWR2Q5MZhDXshUswwc3H_S-5EcbFsWzFhbAdyJBJRkFrMch9_ZiFLocdFjrd_in7xEljxCRx1hoJqQXLUNolaquB8hioOV_RnovVJjwTWmH9T0BkWMJ2A",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/verify-jwt?jwt={{jwt1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"verify-jwt"
					],
					"query": [
						{
							"key": "jwt",
							"value": "{{jwt1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat 201 - public: true - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "89c1b8c6-1909-4631-a9c8-71844a7c5dcd",
						"exec": [
							"pm.environment.set(\"boat_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"King A\",\r\n  \"type\": \"Yatcha\",\r\n  \"length\": 999,\r\n  \"public\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat_01_01 201 - pub true - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8d72a375-ae48-48e7-8e43-a07e03c473fd",
						"exec": [
							"pm.environment.set(\"boat_01_01_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Fridgeaire A\",\r\n  \"type\": \"Frigate\",\r\n  \"length\": 500,\r\n  \"public\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat_01_02 201 - pub true - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8860f9eb-f4c6-4563-adf9-6455cd51c6ed",
						"exec": [
							"pm.environment.set(\"boat_01_02_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Pew Pew\",\r\n  \"type\": \"Laser\",\r\n  \"length\": 12,\r\n  \"public\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat_01_03 201 - pub true - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "156349ef-a431-4ecb-8147-82a3175c4629",
						"exec": [
							"pm.environment.set(\"boat_01_03_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Noodles Fight\",\r\n  \"type\": \"Heavy Cruiser\",\r\n  \"length\": 655,\r\n  \"public\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat_01_04 201 - pub true - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9431c9ca-6423-4481-a855-5e0e53ee54b7",
						"exec": [
							"pm.environment.set(\"boat_01_04_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Cheddar Pop\",\r\n  \"type\": \"Battle Cruiser\",\r\n  \"length\": 800,\r\n  \"public\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat_01_05 201 - pub true - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "39537753-dc3e-4e10-b8f8-09e050a13d14",
						"exec": [
							"pm.environment.set(\"boat_01_05_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Triscuits\",\r\n  \"type\": \"Battleship\",\r\n  \"length\": 1000,\r\n  \"public\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat_01_06 201 - pub true - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "160e3647-d833-4ce3-82c0-29a83768d29b",
						"exec": [
							"pm.environment.set(\"boat_01_06_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Floating parking lot\",\r\n  \"type\": \"Aircraft carrier\",\r\n  \"length\": 1500,\r\n  \"public\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat_01_07 201 - pub true - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "35e06bc4-9cf9-4644-be53-4df98081d025",
						"exec": [
							"pm.environment.set(\"boat_01_07_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Waldo\",\r\n  \"type\": \"Submarine\",\r\n  \"length\": 600,\r\n  \"public\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat_01_08 201 - pub true - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "962060d1-e208-45e4-bb4a-3d08e2a80870",
						"exec": [
							"pm.environment.set(\"boat_01_08_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Ankle biter\",\r\n  \"type\": \"Fast attack craft\",\r\n  \"length\": 150,\r\n  \"public\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat_01_09 201 - pub true - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e028ff59-2252-46a4-b855-2e13148e58ba",
						"exec": [
							"pm.environment.set(\"boat_01_09_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Vroom Vroom\",\r\n  \"type\": \"Corvette\",\r\n  \"length\": 239,\r\n  \"public\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat_01_10 201 - pub true - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "da5b2e31-2635-4b18-a70c-c74fd35b7354",
						"exec": [
							"pm.environment.set(\"boat_01_10_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Roomba\",\r\n  \"type\": \"Patrol boat\",\r\n  \"length\": 90,\r\n  \"public\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat_01_11 201 - pub true - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9fd62193-9d20-4d02-ae23-d31ed04d522a",
						"exec": [
							"pm.environment.set(\"boat_01_11_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Cat and Furniture\",\r\n  \"type\": \"Destroyer\",\r\n  \"length\": 510,\r\n  \"public\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat 201 - public: true - auth invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "113fb76c-463c-42c2-af14-de92240daa70",
						"exec": [
							"// pm.environment.set(\"boat_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}} 1",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Queen Butter\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 100,\r\n  \"public\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat 201 - public: true - no auth header",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "68c305e9-7dbc-432e-b83a-52ee82fe8638",
						"exec": [
							"// pm.environment.set(\"boat_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Queen IIII\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 999,\r\n  \"public\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat 406 - request not accept json (jwt2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ef6e01e5-bb36-4e56-93b7-6189d3e0fb5b",
						"exec": [
							"// pm.environment.set(\"boat_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<h1>Hello</h1>",
					"options": {
						"raw": {
							"language": "html"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat 406 - request not accept json (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "62453693-a5b3-44ac-a556-45d3e3daebb8",
						"exec": [
							"// pm.environment.set(\"boat_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<h1>Hello</h1>",
					"options": {
						"raw": {
							"language": "html"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat_01_12 201 - public: false - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8ccd2937-9fcd-4850-b4d5-076ab27fae85",
						"exec": [
							"pm.environment.set(\"boat_01_12_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Queen ZZZZ\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 999,\r\n  \"public\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat 201 - public: false - auth invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a17a9bff-c0cb-4367-99b4-8916f82715c6",
						"exec": [
							"// pm.environment.set(\"boat_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}} a",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Queen ZZZZZZ\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 999,\r\n  \"public\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat_02_01 201 - public: false - auth valid (jwt2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cbc91195-feb3-4b37-a1e2-2a00287a61e6",
						"exec": [
							"pm.environment.set(\"boat_02_01_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Joker AAA\",\r\n  \"type\": \"Yatcha\",\r\n  \"length\": 999,\r\n  \"public\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat_02_02 201 - public: true - auth valid (jwt2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e10def76-f228-4bb1-a806-bf9c4dc6c813",
						"exec": [
							"pm.environment.set(\"boat_02_02_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Wiggle Butts\",\r\n  \"type\": \"Battleship\",\r\n  \"length\": 1150,\r\n  \"public\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat_02_03 201 - public: false - auth valid (jwt2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e814a658-2369-4851-8d86-211448218d7c",
						"exec": [
							"pm.environment.set(\"boat_02_03_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Kraken\",\r\n  \"type\": \"Submarine\",\r\n  \"length\": 1400,\r\n  \"public\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all boats 200 - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b20f25c2-e907-453f-8c26-4b5f8cf3f673",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				},
				"description": "Authorization needs to be set to bearer token for pagination to work with corresponding jwt"
			},
			"response": []
		},
		{
			"name": "get all boats 200 - auth invalid (jwt)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8808dde2-f5e8-4a5f-93f9-f6f93f3b38df",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}} a",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all boats 200 - auth valid (jwt2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c2718ae0-9e9a-4a2e-9d6e-6621f6c76afc",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update boat 204 - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c129a8bf-3c3a-44eb-a9fe-6c676e93df5d",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Emperor of the Ocean\",\n  \"type\": \"Yatcha\",\n  \"length\": 10000,\n  \"public\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update boat name not str 400 (jwt1) invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5ca4a3bd-5b16-4812-bc9f-4aada717e423",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": 123,\n  \"type\": \"Yatcha\",\n  \"length\": 999,\n  \"public\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update boat length range 400 (jwt1) invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "267b2635-d1a7-4c0f-a9a2-9a6adf2d96c4",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Emperor of the Ocean\",\n  \"type\": \"Yatcha\",\n  \"length\": 10000000,\n  \"public\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update boat name char space 400 (jwt1) invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f3cc8698-4017-40df-ba66-3a6b824d30e2",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Emperor of the Ocean -@\",\n  \"type\": \"Yatcha\",\n  \"length\": 10000,\n  \"public\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update boat type str 400 (jwt1) invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "427019b5-dccc-43f8-8399-6013192f6007",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Emperor of the Ocean\",\n  \"type\": 1,\n  \"length\": 10000,\n  \"public\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update boat type length 400 (jwt1) invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dfdb5863-7b11-4ba1-b574-3cb728059f10",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Emperor of the Ocean\",\n  \"type\": 1,\n  \"length\": 10000,\n  \"public\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch boat name 204 - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3470c1a5-b29d-495b-a39c-6cbc9da1be98",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Emperor of the Ocean II\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch length 204 - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1a2e2cb9-3d90-4603-a9b1-d83353a6c385",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"length\": 150\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch boat type 204 - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3c1b5863-c845-41f0-bbdc-66e47a6ca0f3",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"type\": \"Dragon Boat\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch boat public - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a96bac8b-743d-4870-b034-d8249c092fdb",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"public\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch boat wrong key val 400 (jwt1) invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ddd6531e-431a-4c2a-931d-0d253b4e4d95",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"tomato\": \"Hello\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch boat name not str 400 (jwt1) invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d7985d81-8aa8-4d56-9840-631452519ef5",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Hello\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch length 204 - auth valid (jwt1) invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "07cadca7-5e0e-4f5e-bc2a-a374ae00dcbc",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"length\": 150\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch boat type str 204 - auth valid (jwt1) invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "02b30de4-764e-496d-83bd-096e33853dbc",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"type\": 123\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch boat public - auth valid (jwt1) invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9dda7d9a-fdda-47b1-b0b8-efa49b8f4d55",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"public\": 123\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Dont use - get all owner_id (user_id1)  boats 200 - auth valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c3e8924e-230d-4cb7-942d-e030454c8d30",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImQ5NDZiMTM3NzM3Yjk3MzczOGU1Mjg2YzIwOGI2NmU3YTM5ZWU3YzEiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiYXpwIjoiNzM4NDE0NDI4ODg2LXE5MGJtamt0c2d1ajAyaGZsNnVsYTdwYzdzdml0bXN0LmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwiYXVkIjoiNzM4NDE0NDI4ODg2LXE5MGJtamt0c2d1ajAyaGZsNnVsYTdwYzdzdml0bXN0LmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwic3ViIjoiMTAyODUyMjU2NDA4OTcxMzA4MDc1IiwiZW1haWwiOiJqd29uZ3Rvb0BnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXRfaGFzaCI6IlZ6TC1YX0ZDSy1CTDlfeDljMlNMbWciLCJpYXQiOjE2MDU3NDY4MjEsImV4cCI6MTYwNTc1MDQyMX0.g8C8juKRyDubSzxLgmmiv7jExOmeSTCI5ZTZ0SI2F4AAzxFBZJz707FdyytgVC5CooR710ipQM8eZjU6bQ8EkJ1tDamY-kauIKgVOQfrOpfYqk2ESDJ7_4RKYaDLekypkDu1zirC8-LI2Zbcw0JfxqYGmcI65zq7xmsiWFcogtROE8WnUKTqVYo9qpuZnU9W9jOuOYOxPg5wM1Le1Tr2k9IT9JresbS9me0mRsQRIXNkO8LOO5gsSp8b5bJ4hrzA0mjyXlwmSzOP_3avbgRfC6bxQ1PHRaJHSJFOKMIICrTSw1V2dynNFFwCjWXPFwrUGdXZfMC2CBc4shHitchLAg",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/owners/{{user_id1}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"owners",
						"{{user_id1}}",
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat w-ID 200 - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "db9a9e6e-29b2-436f-b6d6-73f0531b4be0",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat w-ID 401 - auth invalid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "305d652c-0410-4953-a4c2-12e7f283d241",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}} a",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat w-ID 403 ( jwt1)  w/ jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c62a052a-2fad-448e-b125-8233d2dd2e5c",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				},
				"description": "user with jwt 2 trying to read boat created by jwt1"
			},
			"response": []
		},
		{
			"name": "Update boat 403 ( jwt1)  w/ jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f8b77138-4f41-4644-88f4-53a4d66bfa5e",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Emperor of the Ocean Dos\",\n  \"type\": \"Gucci Gucci\",\n  \"length\": 10000,\n  \"public\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				},
				"description": "user with jwt 2 trying to update boat created by jwt1"
			},
			"response": []
		},
		{
			"name": "patch boat name 403 (jwt1)   w/ jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "108ba54c-7782-4ce1-b603-3f6718efe8da",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"The Gucci Gucci\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				},
				"description": "user with jwt 2 trying to update boat created by jwt1"
			},
			"response": []
		},
		{
			"name": "delete boat 403 (jwt1)   w/ jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5b3318c1-db2a-40e1-9377-1362c0623974",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat01_01  w-ID 403 ( jwt1)  w/ jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9a8cedd8-f248-4564-8c00-816b9df37601",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				},
				"description": "user with jwt 2 trying to read boat created by jwt1"
			},
			"response": []
		},
		{
			"name": "Update boat01_01 403 ( jwt1) w/ jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5dcf11ef-7610-459a-9ee5-6d347a6550b2",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Emperor of the Ocean Dos\",\n  \"type\": \"Gucci Gucci\",\n  \"length\": 10000,\n  \"public\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				},
				"description": "user with jwt 2 trying to update boat created by jwt1"
			},
			"response": []
		},
		{
			"name": "patch boat01_01 name 403 (jwt1)  w/ jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25b2eaaa-2fce-46b7-aafe-3a15f3ff2546",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"The Gucci Gucci\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				},
				"description": "user with jwt 2 trying to update boat created by jwt1"
			},
			"response": []
		},
		{
			"name": "delete boat01_01 403 (jwt1) w/ jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "08a56fee-cb5e-43a0-942f-e899974b95ea",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat 204 - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "57093f75-dc48-4eca-80f0-15e656e3cabe",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat 401 - auth invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a4768415-15b3-4fc9-8d12-62dc150512fc",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}} s",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user list 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "51ccf080-b079-4fe3-acef-0fbd8ac9185c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/users",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load 201 - Aztec medallion",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3525ceae-49f1-48ab-9c2f-edbf79f6c93c",
						"exec": [
							"// Set load id environment variable from response",
							"pm.environment.set(\"load_id\", pm.response.json()[\"id\"]);",
							"",
							"// Check for 201 status code (201 Created)",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// // Check if the response content is valid and matches the expected values",
							"// // Check if the self url is correct",
							"// pm.test(\"content is valid\", function () {",
							"//     pm.expect(pm.response.json()[\"content\"]).to.eq(\"Will Turner gold Aztec medallion\");",
							"//     pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"10/31/2020\");",
							"//     pm.expect(pm.response.json()[\"weight\"]).to.eq(1);",
							"//     pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"//     const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"//     pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"// });",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": 1,\n  \"content\": \"Will Turner gold Aztec medallion\",\n  \"delivery_date\": \"10/01/2001\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				},
				"description": "All  newly created loads should begin unassigned to any boat."
			},
			"response": []
		},
		{
			"name": "add load01 201 - Capt. Jack Sparrow's compass",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9fe818a3-eb69-4fb3-bf10-e71db79beed8",
						"exec": [
							"// Set load id environment variable from response",
							"pm.environment.set(\"load01_id\", pm.response.json()[\"id\"]);",
							"",
							"// Check for 201 status code (201 Created)",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// //Check for appropriate content including self attribute",
							"// pm.test(\"load01 content is valid\", function () {",
							"//     pm.expect(pm.response.json()[\"content\"]).to.eq(\"Captain Jack Sparrow's compass\");",
							"//     pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"11/02/2020\");",
							"//     pm.expect(pm.response.json()[\"weight\"]).to.eq(1);",
							"//     pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"//     const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"//     pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"// });",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": 1,\n  \"content\": \"Captain Jack Sparrow's compass\",\n  \"delivery_date\": \"11/02/2020\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load02 201 - Capt. Barbossa's Aztec dagger",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e3f4ec00-a3e6-45cb-82c3-308c11b850d9",
						"exec": [
							"// Set load id environment variable from response",
							"pm.environment.set(\"load02_id\", pm.response.json()[\"id\"]);",
							"",
							"// Check for 201 status code (201 Created)",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// //Check for appropriate content including self attribute",
							"// pm.test(\"load02 content is valid\", function () {",
							"//     pm.expect(pm.response.json()[\"content\"]).to.eq(\"Captain Hector Barbossa Aztec dagger\");",
							"//     pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"11/02/2020\");",
							"//     pm.expect(pm.response.json()[\"weight\"]).to.eq(3);",
							"//     pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"//     const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"//     pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"// });",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": 3,\n  \"content\": \"Captain Hector Barbossa Aztec dagger\",\n  \"delivery_date\": \"11/02/2020\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load03 201 - Elizabeth Swan's dress",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "39307d08-736c-406a-b65b-691c413cf25a",
						"exec": [
							"// Set load id environment variable from response",
							"pm.environment.set(\"load03_id\", pm.response.json()[\"id\"]);",
							"",
							"// Check for 201 status code (201 Created)",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// //Check for appropriate content including self attribute",
							"// pm.test(\"load03 content is valid\", function () {",
							"//     pm.expect(pm.response.json()[\"content\"]).to.eq(\"Elizabeth Swan's dress\");",
							"//     pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"11/01/2020\");",
							"//     pm.expect(pm.response.json()[\"weight\"]).to.eq(5);",
							"//     pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"//     const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"//     pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"// });",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": 5,\n  \"content\": \"Elizabeth Swan's dress\",\n  \"delivery_date\": \"11/01/2020\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load04 201 - Heart of Davy Jones",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8d398f98-2fcf-4efa-9bc1-3ad6b9fae3d2",
						"exec": [
							"// Set load id environment variable from response",
							"pm.environment.set(\"load04_id\", pm.response.json()[\"id\"]);",
							"",
							"// Check for 201 status code (201 Created)",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// //Check for appropriate content including self attribute",
							"// pm.test(\"load04 content is valid\", function () {",
							"//     pm.expect(pm.response.json()[\"content\"]).to.eq(\"Heart of Davy Jones\");",
							"//     pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"11/04/2020\");",
							"//     pm.expect(pm.response.json()[\"weight\"]).to.eq(4);",
							"//     pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"//     const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"//     pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"// });",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": 4,\n  \"content\": \"Heart of Davy Jones\",\n  \"delivery_date\": \"11/04/2020\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all loads with pagination 200 - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "af407823-d216-47aa-a13d-3e705219fbbf",
						"exec": [
							"// Check for success 200 response code (200 OK)",
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// pm.test(\"only correct number of loads in response\", function () {",
							"//     // Check for correct number of loads (assignment said 3)",
							"//     // get length of loads list and see if equals query limit of 3",
							"//     assigned_query_limit = 3;",
							"//     pm.expect(pm.response.json()[\"loads\"].length).to.eql(assigned_query_limit);",
							"// });",
							"",
							"// // Check if next property exists",
							"// pm.test(\"next property exists\", function () {",
							"//     pm.expect(pm.response.json()).to.include.keys(\"next\");",
							"// });",
							"",
							"// next_url = pm.response.json().next;",
							"",
							"// //Send request to check if next link works",
							"// // get response info",
							"// pm.test(\"next property works\", function () {",
							"//     pm.sendRequest(pm.response.json()[\"next\"],",
							"//         function (err, response) {",
							"//             console.log(response.json())",
							"//             console.log(\"It worked!\")})",
							"// });",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				},
				"description": "According to piazza @132 the testing for pagination is optional"
			},
			"response": []
		},
		{
			"name": "add load05 201 - Pintel's umbrella",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "566b015b-3068-4187-bead-cdfd343cbddc",
						"exec": [
							"// Set load id environment variable from response",
							"pm.environment.set(\"load05_id\", pm.response.json()[\"id\"]);",
							"",
							"// Check for 201 status code (201 Created)",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// //Check for appropriate content including self attribute",
							"// pm.test(\"load04 content is valid\", function () {",
							"//     pm.expect(pm.response.json()[\"content\"]).to.eq(\"Pintel's umbrella\");",
							"//     pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"11/04/2020\");",
							"//     pm.expect(pm.response.json()[\"weight\"]).to.eq(4);",
							"//     pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"//     const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"//     pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"// });",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": 2,\n  \"content\": \"Pintels umbrella\",\n  \"delivery_date\": \"12/04/2020\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load06 201 - Ragetti's umbrella",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d1d37418-c064-4f4c-8116-301ab062dc98",
						"exec": [
							"// Set load id environment variable from response",
							"pm.environment.set(\"load06_id\", pm.response.json()[\"id\"]);",
							"",
							"// Check for 201 status code (201 Created)",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// //Check for appropriate content including self attribute",
							"// pm.test(\"load04 content is valid\", function () {",
							"//     pm.expect(pm.response.json()[\"content\"]).to.eq(\"Heart of Davy Jones\");",
							"//     pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"11/04/2020\");",
							"//     pm.expect(pm.response.json()[\"weight\"]).to.eq(4);",
							"//     pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"//     const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"//     pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"// });",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": 2,\n  \"content\": \"Ragettis umbrella\",\n  \"delivery_date\": \"12/04/2020\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load07 201 - Tortuga Rum",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "da9079af-b2d1-4b0c-ab49-a764857f7de6",
						"exec": [
							"// Set load id environment variable from response",
							"pm.environment.set(\"load07_id\", pm.response.json()[\"id\"]);",
							"",
							"// Check for 201 status code (201 Created)",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// //Check for appropriate content including self attribute",
							"// pm.test(\"load04 content is valid\", function () {",
							"//     pm.expect(pm.response.json()[\"content\"]).to.eq(\"Heart of Davy Jones\");",
							"//     pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"11/04/2020\");",
							"//     pm.expect(pm.response.json()[\"weight\"]).to.eq(4);",
							"//     pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"//     const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"//     pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"// });",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": 400,\n  \"content\": \"Tortuga rum, multiple crates\",\n  \"delivery_date\": \"12/30/2020\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load08 201 - Pirate Monkey",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0f0c305d-bdd7-484b-a897-87941b52ede9",
						"exec": [
							"// Set load id environment variable from response",
							"pm.environment.set(\"load08_id\", pm.response.json()[\"id\"]);",
							"",
							"// Check for 201 status code (201 Created)",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// //Check for appropriate content including self attribute",
							"// pm.test(\"load04 content is valid\", function () {",
							"//     pm.expect(pm.response.json()[\"content\"]).to.eq(\"Heart of Davy Jones\");",
							"//     pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"11/04/2020\");",
							"//     pm.expect(pm.response.json()[\"weight\"]).to.eq(4);",
							"//     pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"//     const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"//     pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"// });",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": 8,\n  \"content\": \"A cursed pirate monkey named Jack.\",\n  \"delivery_date\": \"12/08/2020\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all loads with pagination 200 - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6c786ad2-134d-4d40-aa60-448bf3fc235f",
						"exec": [
							"// Check for success 200 response code (200 OK)",
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// pm.test(\"only correct number of loads in response\", function () {",
							"//     // Check for correct number of loads (assignment said 3)",
							"//     // get length of loads list and see if equals query limit of 3",
							"//     assigned_query_limit = 3;",
							"//     pm.expect(pm.response.json()[\"loads\"].length).to.eql(assigned_query_limit);",
							"// });",
							"",
							"// // Check if next property exists",
							"// pm.test(\"next property exists\", function () {",
							"//     pm.expect(pm.response.json()).to.include.keys(\"next\");",
							"// });",
							"",
							"// next_url = pm.response.json().next;",
							"",
							"// //Send request to check if next link works",
							"// // get response info",
							"// pm.test(\"next property works\", function () {",
							"//     pm.sendRequest(pm.response.json()[\"next\"],",
							"//         function (err, response) {",
							"//             console.log(response.json())",
							"//             console.log(\"It worked!\")})",
							"// });",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				},
				"description": "According to piazza @132 the testing for pagination is optional"
			},
			"response": []
		},
		{
			"name": "add boat 201 - public: true - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a1c5466a-3bcb-4b4f-9da9-af8bfa89ae1e",
						"exec": [
							"pm.environment.set(\"boat_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"King A due\",\r\n  \"type\": \"Yatcha\",\r\n  \"length\": 999,\r\n  \"public\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load to boat (jwt1) 403 as jwt2 <----------------",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "33cb79da-cb61-41c0-abc9-c2c1bd623aa9",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load to boat_02_01 (jwt2) 403 as jwt1 <----------------",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "413c8780-1380-4cdd-889a-059198f3cb88",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_02_01_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_02_01_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load to boat 204 (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aec9d8c1-2c19-49af-9cd1-2ca48e8c3593",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load01 to boat 204  (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "86376171-d92f-4231-9c2f-318674b4a1ba",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load02 to boat 204  (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d4d48394-49eb-4cb1-a8fb-2511bb70d64c",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load03 to boat 204  (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b9918f30-26f5-4979-8dd7-0f0824268eec",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load04 to boat 204  (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "edd76e49-67b0-4c9c-a661-c198415a8631",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load04_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load04_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load05 to boat_01_01 204  (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "15d3cf06-e48e-419d-8879-d20c4707f9ce",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_01_01_id}}/loads/{{load05_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_01_01_id}}",
						"loads",
						"{{load05_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load06 to boat_01_01 204 (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a2304335-ebf9-4f5e-94b2-4d77201457f3",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_01_01_id}}/loads/{{load06_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_01_01_id}}",
						"loads",
						"{{load06_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load07 to boat_01_01 204  (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b5dd773b-b246-49e4-9195-997caeba7b7c",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_01_01_id}}/loads/{{load07_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_01_01_id}}",
						"loads",
						"{{load07_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load08 to boat_01_01 204  (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0d753667-6365-4999-b9a9-566b0697a897",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_01_01_id}}/loads/{{load08_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_01_01_id}}",
						"loads",
						"{{load08_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update load with funny 204 (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "09d7febc-d7a5-4ee4-8ac8-e779248d52b2",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": 1,\n  \"content\": \"Will Turner gold Aztec kazoo\",\n  \"delivery_date\": \"10/01/2001\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update load content not str 400 (jwt1) invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4a3040ad-67c0-481e-beaa-0d708f2f1ac2",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": 123,\n  \"content\": 123123,\n  \"delivery_date\": \"10/01/2001\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update load01 with funny 204 (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9cb9cd6d-c73e-4640-8a52-93802e62484a",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": 1000,\n  \"content\": \"Captain Jack Sparrow's Chiquita Bananas\",\n  \"delivery_date\": \"11/02/2020\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update load01 not enough key 400 (jwt1) invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "096a2e41-cf85-4b50-8b1f-ac7e594a8d04",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": 1000,\n  \"delivery_date\": \"11/02/2020\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update load02 with funny 204 (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "eda64fba-5f0f-4988-a147-7370bfe09e45",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": 2,\n  \"content\": \"Captain Hector Barbossa pickled fish dagger\",\n  \"delivery_date\": \"11/02/2020\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update load02 weight not int (jwt1) invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "88a2f0e7-cad8-4f48-85cf-09e09f29d31b",
						"exec": [
							"// Check for error code 400 (204 No Content)",
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": \"2\",\n  \"content\": \"Captain Hector Barbossa pickled fish dagger\",\n  \"delivery_date\": \"11/02/2020\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update load02 weight range (jwt1) invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9f125aaf-d7c0-4927-b5a7-1b38a6bbabfc",
						"exec": [
							"// Check for error code 400 (204 No Content)",
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": 1000000,\n  \"content\": \"Captain Hector Barbossa pickled fish dagger\",\n  \"delivery_date\": \"11/02/2020\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update load02 weight range neg (jwt1) invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0a106016-2e49-4f98-89e2-e89029d44267",
						"exec": [
							"// Check for error code 400 (204 No Content)",
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": -1,\n  \"content\": \"Captain Hector Barbossa pickled fish dagger\",\n  \"delivery_date\": \"11/02/2020\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update load03 with funny 204 (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ad41a9bd-1940-4fd4-857c-5a918f3e6575",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": 1500,\n  \"content\": \"Elizabeth's Kraken Winter Ball dress\",\n  \"delivery_date\": \"11/01/2020\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update load03 date format 400 (jwt1) invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fe559db9-168c-4654-a86e-316c1df61860",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": 1500,\n  \"content\": \"Elizabeth's Kraken Winter Ball dress\",\n  \"delivery_date\": \"11-01-2020\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update load03 date typ 400 (jwt1) invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d64d4723-29df-4117-a9db-7aaff6c7e817",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": 1500,\n  \"content\": \"Elizabeth's Kraken Winter Ball dress\",\n  \"delivery_date\": 11012000\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update load04 with funny 204 (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cd050780-d968-4b18-8597-fefe7506ee93",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": 3,\n  \"content\": \"Heart of Rocky Balboa\",\n  \"delivery_date\": \"11/04/2020\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load04_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load04_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update load content 204 (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "053e6726-6b71-4f40-b8d8-8119dfb59a5d",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"content\": \"Heart of Rocky Balboa that is on fire!\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update load delivery date 204 (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c0c8eded-3835-47cc-9550-4d4e1ec69f13",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"delivery_date\": \"03/14/2021\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update load weight 204 (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8c689ee7-ffb9-4fa1-a01c-418ae17c723e",
						"exec": [
							"// Check for error code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": 150\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update load content data type 400 (jwt1) invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa05f3a3-5b5f-4b9d-81f0-6ded7abf99ce",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"content\": 1234\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update load content length 400 (jwt1) invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f4ca3509-5ad4-4c21-b173-fa6f18ce4629",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"content\": \"Heart of Rocky Balboa Poo Heart of Rocky Balboa Poo Heart of Rocky Balboa Poo Heart of Rocky Balboa Poo Heart of Rocky Balboa Poo Heart of Rocky Balboa Poo Heart of Rocky Balboa Poo Heart of Rocky Balboa Poo Heart of Rocky Balboa Poo\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update load delivery date format 400 (jwt1) invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c18a795c-0bc2-405a-8463-e52b98299368",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"delivery_date\": \"03-23-2021\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update load weight  range 400 (jwt1) invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "706530ec-01ae-4243-9dce-ff76e0acc874",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": 1500000\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update load weight data type 400 (jwt1) invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f980c22d-fda2-4000-8ea7-48a88b0d7d72",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"weight\": 12.0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load from boat 204 (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "26301144-c01f-41ac-9265-20d670ee9a30",
						"exec": [
							"// Check for apprropriate status code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load01 from boat 204 (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "72e7d672-09d9-4fd0-8f9d-9fbaa5ac8894",
						"exec": [
							"// Check for apprropriate status code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load02 from boat 204 (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cf271919-c95e-4d4d-9377-85cd93a904f3",
						"exec": [
							"// Check for apprropriate status code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load03 from boat 204 (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fc1ec3d5-9661-444c-bdcf-beeeb56e9ce3",
						"exec": [
							"// Check for apprropriate status code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load04 from boat 204 (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "73af17a7-aee5-43e3-b0ea-aa6112c99806",
						"exec": [
							"// Check for apprropriate status code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load04_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load04_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat 204 - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "83df7f67-5409-4e51-a797-d18674cf0465",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_01_01 204 - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7b60e256-3935-4d4b-9979-22815a79c838",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_01_01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_01_01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_01_02 204 - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e12d3d77-5e51-4d4a-8fcf-4767703f3cc0",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_01_02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_01_02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_01_03 204 - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a80528db-b847-4735-b199-962ee6906f2a",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_01_03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_01_03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_01_04 204 - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c098d907-42e5-47dd-99fa-9c007e6bc0c8",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_01_04_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_01_04_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_01_05 204 - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "280773f4-7f23-42ef-9760-a297f69d6b73",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_01_05_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_01_05_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_01_06 204 - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a8038371-da6a-4dd4-9bc2-3b6f4f8d5bfa",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_01_06_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_01_06_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_01_07 204 - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fce204ac-c5f7-4841-8f4e-dcd4a1bdc579",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_01_07_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_01_07_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_01_08 204 - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f5c53587-e4d3-4cd6-9513-1921f01248ae",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_01_08_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_01_08_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_01_09 204 - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "97dbb5a0-d515-412f-8170-8003700ff70c",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_01_09_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_01_09_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_01_10 204 - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a8a6c339-ea9e-401e-8a66-bf31bc1669d1",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_01_10_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_01_10_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_01_11 204 - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a0072cc9-8833-4184-a517-283bee9e3fcd",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_01_11_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_01_11_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_01_12 204 - auth valid (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b00c0548-ce82-4557-a435-fdc7dea901e2",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_01_12_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_01_12_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_02_01 204 - auth valid (jwt2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1920ffcf-8279-48d4-8a3b-ef87aa084845",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_02_01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_02_01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_02_02 204 - auth valid (jwt2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a3359ed2-82ca-4e60-9bf9-74c5d9d3a093",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_02_02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_02_02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_02_03 204 - auth valid (jwt2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6355cfb7-7936-430f-b878-16fc7f8c54da",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_02_03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_02_03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cb609231-bcdd-4c51-b385-11562621b5dc",
						"exec": [
							"// Check for apprropriate status code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load01 (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2bb42e22-b359-45d4-8d84-8d0779c6be29",
						"exec": [
							"// Check for apprropriate status code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load02 (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8658f2c7-22fb-400b-a14c-10b37081a42e",
						"exec": [
							"// Check for apprropriate status code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load03 from boat 204 (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "17b35cb2-a939-4b60-8ef3-c34536803ca6",
						"exec": [
							"// Check for apprropriate status code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load04 (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4f54cbc7-e6e4-4934-ba53-a6fd90fbe915",
						"exec": [
							"// Check for apprropriate status code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load04_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load04_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load05(jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "79512e94-b6b7-4f37-ad45-82af6039d215",
						"exec": [
							"// Check for apprropriate status code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load05_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load05_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load06 (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b113d2f7-5356-417d-8339-302f63d80fc3",
						"exec": [
							"// Check for apprropriate status code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load06_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load06_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load07 (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2a80cecb-0840-4047-8763-9b1a9cfb509e",
						"exec": [
							"// Check for apprropriate status code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load07_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load07_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load08 (jwt1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d9f74012-2c15-473b-809c-be7d4207af10",
						"exec": [
							"// Check for apprropriate status code 204 (204 No Content)",
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load08_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load08_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "7e4f7c16-03eb-49e4-88fc-8e8a265b862f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f3f24d1a-00aa-4c72-aab5-677066921664",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}